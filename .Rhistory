# print(names(histo))
yy = histo$midu; ww = histo$w;
} else {
yy = y; ww = weights;
}
kwo = kwprimal(yy, weights = ww, grid_len = num_atoms);
if (hist_flag){
fmat = dnorm(outer(y, kwo$atoms, "-"))
kwo$f1y = as.vector(fmat %*% kwo$probs)
kwo$ll = mean(log(kwo$f1y))
}
return(kwo)
}
lgstep = function(y, x, w, b, num_atoms, blambda, level){
f0y = dnorm(y)
# take one step of EM on data
kwo = kwprimal_weights(y, weights = w, num_atoms)
lp = lregoptim(f0y, kwo$f1y, x, b, lambda = blambda)
# compute results
den = (1 - lp$p) * f0y + lp$p * kwo$f1y; ll = mean(log(den)); localfdr = (1 - lp$p) * f0y/(den);
rejset = reject_set(localfdr, level)
return(list(p = lp$p, b = lp$b, f1y = kwo$f1y, kwo=kwo,
localfdr = localfdr, den = den, ll = ll, rejset = rejset))
}
# solve logistic problem given alternate density (AM version)
lregoptim = function(f0y, f1y, x, binit, lambda = 1e-2/length(f0y)){
# by default this provides a l2-regularization
# equivalent to gaussian prior N(0,100) on all parameters
# lambda = c(1e-2/length(f0y), rep(lambda, length(binit)-1))
# defining objective function
llobj = function(bb, f0y, f1y, x, lambda){
pivec = as.vector(1/(1 + exp(-x %*% bb)))
- mean(log(pivec*f1y + (1-pivec)*f0y)) + sum(lambda*bb^2)
}
# defining first gradient
llfirst = function(bb, f0y, f1y, x, lambda){
pivec = as.vector(1/(1 + exp(-x %*% bb)))
wts = (f1y - f0y)/(pivec*f1y + (1-pivec)*f0y) * pivec * (1-pivec)
- apply(x, 2, function(vec) mean(vec * wts)) + 2*lambda*bb
}
optimres = optim(par = binit, fn = llobj, gr = llfirst,
f0y = f0y, f1y = f1y, x = x, lambda = lambda,
method = 'BFGS')
b = optimres$par
p = as.vector(1/(1 + exp(-x %*% b)))
return(list(b = b, p = p))
}
marg1 = function(y, x, blambda = 1e-6/length(y), level = 0.05){
# x=cbind(1, datax)
mt = abs(y) - mean(abs(rnorm(1e4)));
pi0grid = seq(from = 0.01, to = 0.49, by = 0.01);
verbose=FALSE;
grid_len = max(100, round(sqrt(length(y))));
n = length(y); f0y = dnorm(y);
kwm = kwprimal_weights(y, num_atoms = grid_len);
fmy = kwm$f1y;
m1step = function (pt) {
weights = pmax(pmin(1 - (1-pt)*f0y/fmy, 0.99), 0.01)
muinit = mean(mt)/pt
binit = lm(mosaic::logit(pmax(pmin(mt/muinit, 0.9), 0.1)) ~ 0 + x)$coefficients;
robj = lgstep(y, x, weights, binit, grid_len, blambda, level)
robj$pi0 = pt
return(robj)
}
if (verbose) {res = pblapply(pi0grid, m1step)}
else {res = lapply(pi0grid, m1step)}
ll_list = sapply(res, function (robj) robj$ll)
bi = which.max(ll_list)
robj = res[[bi]]
robj$ll_list = ll_list
return(robj)
}
# solve logistic problem given alternate density (EM version)
lregem = function(weights, x, binit, lambda = 1e-2/length(weights)){
# by default this provides a l2-regularization
# equivalent to gaussian prior N(0,100) on all parameters
# lambda = c(1e-2/length(f0y), rep(lambda, length(binit)-1))
# defining objective function
llobj = function(bb, weights, x, lambda){
pivec = as.vector(1/(1 + exp(-x %*% bb)))
- mean(weights * log(pivec) + (1-weights) * log(1-pivec)) + sum(lambda*bb^2)
}
# defining first gradient
llfirst = function(bb, weights, x, lambda){
pivec = as.vector(1/(1 + exp(-x %*% bb)))
tt = pivec * (1-pivec) * (weights/pivec - (1-weights)/(1-pivec))
- apply(x, 2, function(vec) mean(vec * tt)) + 2*lambda*bb
}
optimres = optim(par = binit, fn = llobj, gr = llfirst,
weights = weights, x = x, lambda = lambda,
method = 'BFGS')
b = optimres$par
p = as.vector(1/(1 + exp(-x %*% b)))
return(list(b = b, p = p))
}
# EM
lgem = function(y, x,
weights, binit,
grid_len = 3*max(100, round(sqrt(length(y)))), histFlag = TRUE, timed = 60,
maxit = 600, tol = 1e-6,
blambda = 1e-6/length(y), level){
st = proc.time()['elapsed']
n = length(y); f0y = dnorm(y);
# initial values, may need to revisit this
lp = NULL; lp$b = binit; lp$p = as.vector(1/(1 + exp(-x %*% lp$b)));
# starting iterations
convFlag = 1; ll = NULL; lp_list = NULL; kw_list = NULL; time_list = NULL; itcount = 1; err_list = NULL;
# if(verbose) pb = txtProgressBar(max = maxit+1, style = 3)
while(convFlag){
kwo = kwprimal_weights(y, weights = weights, num_atoms = grid_len, hist_flag = histFlag)
lp = lregem(weights, x, lp$b, lambda = blambda)
weights_new = lp$p*kwo$f1y/((1-lp$p)*f0y + lp$p*kwo$f1y)
iter_error = rmse(weights_new, weights); err_list = append(err_list ,iter_error);
lp_list = append(lp_list, list(lp)); kw_list = append(kw_list, list(kwo));
ll = append(ll, mean(log((1-lp$p)*f0y + lp$p*kwo$f1y)))
ct = proc.time()['elapsed'] - st
time_list = append(time_list, ct)
convFlag = (ct <= timed) & (itcount < maxit) & (iter_error > tol)
weights = weights_new
itcount = itcount + 1
}
localfdr = 1 - weights
rejset = reject_set(localfdr, level)
den = (1-lp$p)*f0y + lp$p*kwo$f1y
return(list(atoms = kwo$atoms, probs = kwo$probs, f1y = kwo$f1y,
b = lp$b, p = lp$p,
f0y = f0y, den = den,
localfdr = localfdr, rejset = rejset,
ll = ll,  lp_list = lp_list, kw_list = kw_list,
err_list = err_list, time_list = time_list,
runtime = proc.time()['elapsed'] - st))
}
# marginal method 2, using a grid of potential values of pi0
# remember to use a good choice of mt (marginal transform)
marg2 = function(y, x, nlslambda = 1e-6/length(y), level = 0.05){
# for an user given sequence pi0 (overall non-null proportion)
# solve non-linear least squares on marginal_transform to get initial value of beta
# x=cbind(1,x);
pi0grid = seq(from = 0.01, to = 0.49, by = 0.01);
mt = abs(y) - mean(abs(rnorm(1e4)));
verbose = FALSE;
solvef1 = TRUE;
n = length(y); f0y = dnorm(y);
mugrid = mean(mt)/pi0grid;
computefn = function (mu) {
# this function uses non-linear least squares to solve for beta for a fixed value of mu
binit = lm(mosaic::logit(pmax(pmin(mt/mu, 0.9), 0.1)) ~ 0 + x)$coefficients
nlso = m2boptim(mt/mu, x, binit, nlslambda)
er = mean((mt - mu * nlso$p)^2)
return(list(nlso = nlso, er = er, mu = mu, pi0 = mean(mt)/mu))
}
if (verbose) {
res = pblapply(mugrid, computefn)
} else {
res = lapply(mugrid, computefn)
}
ers = sapply(res, function (robj) robj$er)
bi = which.min(ers)
regres = res[[bi]]
if(solvef1){
pi0grid = pi0grid[bi]
#robj = m1(y, x, pi0grid = pi0grid[bi], mt = mt)
robj = newmarg1(y, x, level = level)
} else {
robj = list(pi0grid = pi0grid, mugrid = mugrid,
pi0 = pi0grid[bi], mu = mugrid[bi],
regres = regres, res = res)
}
return(robj)
}
# solve marginal regression (logistic model) assuming mean under alternate is 1
m2boptim = function(y, x, binit, lambda = 1e-2/length(y)){
# by default this provides a l2-regularization
# equivalent to gaussian prior N(0,100) on all parameters
# x = cbind(1, x);
# defining objective function
lsobj = function(bb, y, x, lambda){
pivec = as.vector(1/(1 + exp(-x %*% bb)))
mean((y - pivec)^2) + lambda*sum(bb^2)
}
# defining first gradient
lsfirst = function(bb, y, x, lambda){
pivec = as.vector(1/(1 + exp(-x %*% bb)))
wts = -2 * (y - pivec) * pivec * (1-pivec)
apply(x, 2, function(vec) mean(vec * wts)) + 2*lambda*bb
}
optimres = optim(par = binit, fn = lsobj, gr = lsfirst,
y = y, x = x, lambda = lambda,
method = 'BFGS')
b = optimres$par
p = as.vector(1/(1 + exp(-x %*% b)))
return(list(b = b, p = p))
}
rmsepath = function(obj, dd){
rmses = numeric(length(obj$ll))
with(obj , {
for (i in 1:length(rmses)){
p = obj$lp_list[[i]]$p
f1 = obj$kw_list[[i]]$f1y
lfdr = 1 - (p * f1)/((1-p) * f0y + p * f1)
rmses[i] <<- rmse(dd$localfdr, lfdr)
}
})
return(rmses)
}
# from a full mle solution with lots of iterations, extract an earlier iteration for comparison
extract_index = function(obj, ii){
with(obj, {
rr <<- list(atoms = kw_list[[ii]]$atoms, probs = kw_list[[ii]]$probs,
f1y = kw_list[[ii]]$f1y, f0y = f0y,
b = lp_list[[ii]]$b, p = lp_list[[ii]]$p,
ll = ll[ii], rejset = rejset)
})
rr$den = with(rr, (1-p)*f0y + p * f1y)
rr$localfdr = with(rr, (1-p)*f0y/((1-p)*f0y + p * f1y))
return(rr)
}
add_alpha = function(cols, alpha = 0.7)
rgb(red = t(col2rgb(cols))/255, alpha = alpha)
rmlast = function(ss) substr(ss, 1, nchar(ss) - 1)
# find good indices
fgi = function(vec, alpha = 0.5) which(vec >= max(vec) - alpha * sd(vec))
# find index upto which vec increases
fc = function(vec, ivec = 1:length(vec)){
first_decrease = which(sign(c(diff(vec), -1)) == -1)[1]
ivec[first_decrease]
}
# relocate vec so that minimum is zero
rmmin = function(vec) {vec - min(vec)}
# mod fdrreg
modf = function(obj){
obj$b = obj$model$coef
obj$p = obj$priorprob
obj$f0y = obj$M0
obj$f1y = obj$M1
obj$den = (1-obj$p) * obj$f0y + obj$p * obj$f1y
obj$ll = mean(log(obj$den))
return(obj)
}
# extract initialization
extract_init = function(obj){
return(list(p = obj$p, b = obj$b, w = 1 - obj$localfdr))
}
npmleEM <- function(y, x, level = 0.05, initp = 1){
if(initp == 1)
{
m1n_ = marg1(y, x, level = level)
init_list = list(m1n_ = m1n_)
init_bi = which.max(sapply(init_list, function (ro) ro$ll))
init_best = extract_init(init_list[[init_bi]])
init_best_name = names(init_bi)
}
if(initp == 2)
{
m2n_ = marg2(y, x, level = level)
init_list = list(m2n_ = m2n_)
init_bi = which.max(sapply(init_list, function (ro) ro$ll))
init_best = extract_init(init_list[[init_bi]])
init_best_name = names(init_bi)
}
if(initp == 3)
{
ff=FDRreg(y,x[,-1])
f_ = modf(ff)
init_list = list(f_ = f_)
init_bi = which.max(sapply(init_list, function (ro) ro$ll))
init_best = extract_init(init_list[[init_bi]])
init_best_name = names(init_bi)
}
if(initp == 4)
{
ff=FDRreg(y,x[,-1])
f_ = modf(ff)
m1n_ = marg1(y, x, level = level)
m2n_ = marg2(y, x, level = level)
init_list = list(f_ = f_, m1n_ = m1n_, m2n_ = m2n_)
init_bi = which.max(sapply(init_list, function (ro) ro$ll))
init_best = extract_init(init_list[[init_bi]])
init_best_name = names(init_bi)
}
# EM starting from here, run at most 500 iterations
em_ = lgem(y, x, weights = init_best$w, binit = init_best$b, timed = Inf, maxit = 100, level = level)
em_ = extract_index(em_, length(em_$time_list))
return(em_)
}
#######################################################
# Another copy of marginal 1
#######################################################
newmarg1 = function(y, x, blambda = 1e-6/length(y), level = 0.05){
# x=cbind(1, datax)
mt = abs(y) - mean(abs(rnorm(1e4)));
#pi0grid = seq(from = 0.01, to = 0.49, by = 0.01);
verbose=FALSE;
grid_len = max(100, round(sqrt(length(y))));
n = length(y); f0y = dnorm(y);
kwm = kwprimal_weights(y, num_atoms = grid_len);
fmy = kwm$f1y;
m1step = function (pt) {
weights = pmax(pmin(1 - (1-pt)*f0y/fmy, 0.99), 0.01)
muinit = mean(mt)/pt
binit = lm(mosaic::logit(pmax(pmin(mt/muinit, 0.9), 0.1)) ~ 0 + x)$coefficients;
robj = lgstep(y, x, weights, binit, grid_len, blambda, level)
robj$pi0 = pt
return(robj)
}
if (verbose) {res = pblapply(pi0grid, m1step)}
else {res = lapply(pi0grid, m1step)}
ll_list = sapply(res, function (robj) robj$ll)
bi = which.max(ll_list)
robj = res[[bi]]
robj$ll_list = ll_list
return(robj)
}
m1n_ = marg1(st$y, cbind(1, st$xs), level = 0.05)
m2n_ = marg2(st$y, cbind(1, st$xs), level = 0.5)
m2n_$p
m2n_$b
nmle_ = npmleEM(st$y, cbind(1, st$xs), level = 0.3, initp = 4)
rmse = function(vec, truth) sqrt(mean((vec - truth)^2))
deciles = function(vec) quantile(vec, seq(from = 0.1, to = 0.9, by = 0.1))
nmle_ = npmleEM(st$y, cbind(1, st$xs), level = 0.3, initp = 4)
names(nmle_)
nmle_$b
m2n_$b
nmle_$ll
m2n_$ll
nmle_ = npmleEM(st$y, cbind(1, st$xs), level = 0.3, initp = 1)
nmle_$ll
nmle_$b
names(m1n_)
names(m1n_$kwo)
m1n_$den
m1n_$ll_list
names(m1n_$ll)
names(m1n_)
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
names(m2n_)
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
names(nmle_)
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
devtools::document()
plots_dir
library(NPMLEmix)
library(NPMLEmix)
warnings()
suppressWarnings(require(dplyr, quietly = TRUE))
devtools::document()
library(NPMLEmix)
rm(list=ls())
install.packages("latexpdf")
require(latexpdf)
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
library(NPMLEmix)
R CMD check --as-cran NPMLEmix.tar.gz
system("R CMD check --as-cran NPMLEmix.tar.gz")
library(NPMLEmix)
warnings()
require(mosaic)
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
library(NPMLEmix)
rm(list=ls())
remove.packages(NPMLEmix)
remove.packages("NPMLEmix")
library(NPMLEmix)
warnings()
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
library(NPMLEmix)
crossprod(c(1,3),c(2,4))
as.numeric(crossprod(c(1,3),c(2,4)))
devtools::document()
library(NPMLEmix)
devtools::document()
devtools::document()
library(NPMLEmix)
A
A=matrix(0,1000,5)
sparseMatrix(A,giveCsparse = T)
Am=Matrix(A,sparse = "TRUE")
Am=as(A,"sparseMatrix")
Am=as(A,"CsparseMatrix")
devtools::document()
library(NPMLEmix)
devtools::document()
library(NPMLEmix)
devtools::document()
library(NPMLEmix)
install.packages("methods")
install.packages("methods")
install.packages("methods")
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(NPMLEmix)
devtools::document()
m2 <- Matrix(0, nrow = 1000, ncol = 1000, sparse = TRUE)
m1=matrix(0,1000,5)
m2 <- Matrix(m1, sparse = TRUE)
devtools::document()
library(NPMLEmix)
require('Matrix')
?Matrix
devtools::document()
library(NPMLEmix)
devtools::document()
library(NPMLEmix)
devtools::document()
devtools::document()
devtools::document()
library(NPMLEmix)
devtools::document()
devtools::document()
devtools::document()
require(Rmosek)
devtools::document()
getLoadedDLLs()
is.loaded("Rmosek.dll")
is.loaded("roxygen2.dll")
is.loaded("roxygen2en2.dll")
is.loaded("sek.dll")
is.loaded("Rmosek")
is.loaded("roxygen2")
is.loaded(PACKAGE = roxygen2)
is.loaded("en2.dll", PACKAGE = "roxygen2")
is.loaded("roxygen2.dll", PACKAGE = "roxygen2")
devtools::document()
devtools::document()
require(NPMLEmix)
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
remove.packages("NPMLEmix")
remove.packages("dplyr")
devtools::install_github("NabarunD/NPMLEmix")
require(dplyr)
rm(list=ls())
devtools::install_github("NabarunD/NPMLEmix")
install.packages("dplyr")
require(devtools)
require(roxygen2)
require(dplyr)
install.packages("dplyr")
install.packages("dplyr")
require(dplyr)
require(devtools)
require(roxygen2)
devtools::documet()
devtools::document()
library(NPMLEmix)
remove.packages("NPMLEmix")
devtools::install_github("NabarunD/NPMLEmix")
devtools::install_github("NabarunD/NPMLEmix")
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
library(NPMLEmix)
remove.packages("NPMLEmix")
devtools::install_github("NabarunD/NPMLEmix")
devtools::install_github("NabarunD/NPMLEmix")
install.packages("fansi")
install.packages("ggstance")
install.packages("ggstance")
install.packages("ggplot2")
install.packages("ggplot2")
update.packages("ggplot2")
devtools::install_github("NabarunD/NPMLEmix")
require(NPMLEmix)
st=makedata(100,cbind(runif(100),runif(100)),c(0,1,-1),c(0,1),c(0.4,0.6),c(1,1))
m1n_ = marg1(st$y, cbind(1, st$xs), level = 0.05)
m2n_ = marg2(st$y, cbind(1, st$xs), level = 0.5)
nmle_ = npmleEM(st$y, cbind(1, st$xs), level = 0.3, initp = 4)
m1n_
m2n_
nmle
nmle_
names(nmle_)
require(devtools)
require(roxygen2)
devtools::document()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
devtools::document()
remove.packages("npmleMIX")
remove.packages("NPMLEmix")
require(devtools)
require(roxygen2)
devtools::install_github("NabarunD/NPMLEmix")
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
getwd()
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package NPMLEmix --output=./manual.pdf --force --no-clean --internals")
